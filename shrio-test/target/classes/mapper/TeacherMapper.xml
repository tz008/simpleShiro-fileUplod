<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.example.demo.dao.TeacherMapper">
  <resultMap id="BaseResultMap" type="com.example.demo.entity.Teacher">
    <id column="teacherid" jdbcType="INTEGER" property="teacherid" />
    <result column="name" jdbcType="VARCHAR" property="name" />
    <result column="email" jdbcType="VARCHAR" property="email" />
    <result column="school" jdbcType="VARCHAR" property="school" />
    <result column="username" jdbcType="VARCHAR" property="username" />
    <result column="password" jdbcType="VARCHAR" property="password" />
  </resultMap>
  <sql id="Base_Column_List">
    teacherid, name, email, school, username, password
  </sql>
  <select id="selectAllTeacher" parameterType="java.lang.Integer" resultMap="BaseResultMap">
    select
    *
    from teacher
  </select>
  <select id="selectTeacherByTeacherId" parameterType="java.lang.Integer" resultMap="BaseResultMap">
   select
    teacher.*
    from teacher
    where teacher.teacherid  = #{teacherId,jdbcType=INTEGER}
  </select>
  <select id="selectTeacherByCourse" parameterType="java.lang.Integer" resultMap="BaseResultMap">
   select
    teacher.*
    from teacher
    where teacher.teacherid in (select courseteacher.teacher_id from courseteacher where courseteacher.course_id = #{courseId,jdbcType=INTEGER})
  </select>
    <select id="selectTeacherByUserName" parameterType="java.lang.String" resultMap="BaseResultMap">
        select
        <include refid="Base_Column_List" />
        from teacher
        where username = #{userName,jdbcType=VARCHAR}
    </select>
  <select id="teacherLogin" parameterType="java.lang.String" resultMap="BaseResultMap">
    select 
    <include refid="Base_Column_List" />
    from teacher
    where username = #{userName,jdbcType=VARCHAR}
    or email=#{userName,jdbcType=VARCHAR}
    and password = #{passWord,jdbcType=VARCHAR}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
    delete from teacher
    where teacherid = #{teacherid,jdbcType=INTEGER}
  </delete>
  <insert id="insertTeacher" parameterType="com.example.demo.entity.Teacher">
    insert into teacher (teacherid, name, email, 
      school, username, password
      )
    values (#{teacherid,jdbcType=INTEGER}, #{name,jdbcType=VARCHAR}, #{email,jdbcType=VARCHAR}, 
      #{school,jdbcType=VARCHAR}, #{username,jdbcType=VARCHAR}, MD5(#{password,jdbcType=VARCHAR})
      )
  </insert>
  <insert id="insertSelective" parameterType="com.example.demo.entity.Teacher">
    insert into teacher
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="teacherid != null">
        teacherid,
      </if>
      <if test="name != null">
        name,
      </if>
      <if test="email != null">
        email,
      </if>
      <if test="school != null">
        school,
      </if>
      <if test="username != null">
        username,
      </if>
      <if test="password != null">
        password,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="teacherid != null">
        #{teacherid,jdbcType=INTEGER},
      </if>
      <if test="name != null">
        #{name,jdbcType=VARCHAR},
      </if>
      <if test="email != null">
        #{email,jdbcType=VARCHAR},
      </if>
      <if test="school != null">
        #{school,jdbcType=VARCHAR},
      </if>
      <if test="username != null">
        #{username,jdbcType=VARCHAR},
      </if>
      <if test="password != null">
        #{password,jdbcType=VARCHAR},
      </if>
    </trim>
  </insert>
  <update id="updateByPrimaryKeySelective" parameterType="com.example.demo.entity.Teacher">
    update teacher
    <set>
      <if test="name != null">
        name = #{name,jdbcType=VARCHAR},
      </if>
      <if test="email != null">
        email = #{email,jdbcType=VARCHAR},
      </if>
      <if test="school != null">
        school = #{school,jdbcType=VARCHAR},
      </if>
      <if test="username != null">
        username = #{username,jdbcType=VARCHAR},
      </if>
      <if test="password != null">
        password = #{password,jdbcType=VARCHAR},
      </if>
    </set>
    where teacherid = #{teacherid,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.example.demo.entity.Teacher">
    update teacher
    set name = #{name,jdbcType=VARCHAR},
      email = #{email,jdbcType=VARCHAR},
      school = #{school,jdbcType=VARCHAR},
      username = #{username,jdbcType=VARCHAR},
      password = #{password,jdbcType=VARCHAR}
    where teacherid = #{teacherid,jdbcType=INTEGER}
  </update>
</mapper>